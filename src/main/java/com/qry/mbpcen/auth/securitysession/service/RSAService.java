package com.qry.mbpcen.auth.securitysession.service;

import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.PublicKey;
import java.security.Security;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.xml.bind.DatatypeConverter;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.springframework.stereotype.Service;


@Service("RSA_SERVICE")
public class RSAService {
	
	private static final String CRYPTO_ALGORITHM = "RSA";
	private static final String RSAES_OAEP_BC_ALGORITHM = "RSA/None/OAEPWithSHA-256AndMGF1Padding";
//	private static final String RSAES_OAEP_ALGORITHM = RSAES_OAEP_BC_ALGORITHM;
	/**
	 * 스크립트 라이브러리 rsa.js (v1.1) 에서 OAEP 패딩 지원하는 방법 연구중 
	 * 방법 확인 시점 까지는 알고리즘을  RSA 로 설정하여 진행함. 
	 */
	private static final String RSAES_OAEP_ALGORITHM = CRYPTO_ALGORITHM;
	
    
	static {

		System.out.println("\r\n\r\n"
				+ "===================================================================================================\r\n"
				+ "* BOUNCY CASTLE PROVIDER ADD \r\n"
				+ "===================================================================================================\r\n");

		Security.addProvider(new BouncyCastleProvider());
		Provider provider = Security.getProvider("BC");

		if (provider != null) {
			System.out.println("\r\n\r\n"
					+ "===================================================================================================\r\n"
					+ "* BOUNCY CASTLE PROVIDER [" + provider.toString() + "] \r\n"
					+ "===================================================================================================\r\n");

		} else {
			System.out.println("\r\n\r\n"
					+ "===================================================================================================\r\n"
					+ "* BOUNCY CASTLE PROVIDER IS NULL \r\n"
					+ "===================================================================================================\r\n");

		}
	}
	
	/**
	 * 키쌍을 생성한다.
	 * @param algorithm "RSA"
	 * @param nKeyLen   "2048","1024"
	 * @return
	 * @throws NoSuchAlgorithmException
	 */
	public KeyPair generateKeyPair(int nKeyLen) throws NoSuchAlgorithmException {
		KeyPairGenerator genKeyPair = KeyPairGenerator.getInstance(CRYPTO_ALGORITHM);
		genKeyPair.initialize(nKeyLen);
		return genKeyPair.generateKeyPair();
	}
	
	
	/**
	 * RSA 공개키를 이용하여 암호화 한다. 이렇게 암호화 된 데이터는 키쌍이 맞는 개인키로만 풀 수 있다.
	 * 암호화 할 수 있는 데이터의 길이는 최대 245bytes 이다.
	 * 암호화 된 결과는 1024 키의 경우 128bytes, 2048 키의 경우 256bytes 가 출력된다.
	 * @param pubKey RSA 공개키
	 * @param plainText 암호화 할 임의의 데이터
	 * @return 암호화 된 데이터 리턴
	 * @throws Exception
	 */
	public byte[] doRSAPubKeyEncrypt(PublicKey pubKey, byte[] plainText) throws Exception {
		Cipher cipher = Cipher.getInstance(RSAES_OAEP_ALGORITHM);
		cipher.init(Cipher.ENCRYPT_MODE, pubKey);
		return cipher.doFinal(plainText);
	}

	
	/**
	 * RSA 개인키로 복호화를 수행한다. 이때 암호화 된 데이터는 키쌍이 맞는 공개키로 암호화 한 데이터의 경우에만 복호화가 가능하다.
	 * @param priKey RSA 개인키
	 * @param cipherText 암호화 된 데이터
	 * @return 복호화 된 데이터 리턴
	 * @throws NoSuchPaddingException 
	 * @throws NoSuchProviderException 
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidKeyException 
	 * @throws BadPaddingException 
	 * @throws IllegalBlockSizeException 
	 * @throws Exception 복호화 실패
	 */
	public byte[] doRSAPriKeyDecrypt(PrivateKey priKey, byte[] cipherText) throws NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException  {
		Cipher cipher = Cipher.getInstance(RSAES_OAEP_ALGORITHM);
		cipher.init(Cipher.DECRYPT_MODE, priKey);
		return cipher.doFinal(cipherText);
	}

    
	
	
	
	
    public static void main(String[] args) throws Exception {
    	
    	RSAService service = new RSAService();
		
    	
    	
    	
    	KeyPair keyPair = service.generateKeyPair(2048);
		PublicKey  mPubKey = keyPair.getPublic();
		PrivateKey mPriKey = keyPair.getPrivate();
		
		
		String pubKeyHexStr = new String (DatatypeConverter.printHexBinary(mPubKey.getEncoded()));
		String pryKeyHexStr = new String (DatatypeConverter.printHexBinary(mPriKey.getEncoded()));
		
		System.out.println("pubKeyHexStr : [" + pubKeyHexStr + "]");
		System.out.println("pryKeyHexStr : [" + pryKeyHexStr + "]");
		
		//pubKeyHexStr : [30820122300D06092A864886F70D01010105000382010F003082010A02820101009A811290DA8B1F72D1FC871509EB7191A4C75C23445C70A65068D87C599B093170DB3F582AB418457106298A477C3F6F66625A6B7CDFA492E1445F9780113BBFC93173A867AEA3BC27D28A2E10E8645568FFBC5116ED6B91568322DFDC18D99D583EC503E52A90D5DBB0D22D4A42AFECD0EFA88088AD7A08AC02BD49F2C09AAEDABE9518240F2B55B338E41EC9DEE8E7922208700B1EEE59E19FEEE7CEE2E93D9EF0E18735E1DA043DCED004531518266B70D3B644BBEF553967D8792552092E55510A42C81045D6756CB0EDB0F1C5519D51F52B1BA35F52FAC33C9DACDD91F06E67BB2B8A5A2A0CD4FF95F089C132A73861A9874209989C8933A90DD82C78A30203010001]
		//pryKeyHexStr : [308204BC020100300D06092A864886F70D0101010500048204A6308204A202010002820101009A811290DA8B1F72D1FC871509EB7191A4C75C23445C70A65068D87C599B093170DB3F582AB418457106298A477C3F6F66625A6B7CDFA492E1445F9780113BBFC93173A867AEA3BC27D28A2E10E8645568FFBC5116ED6B91568322DFDC18D99D583EC503E52A90D5DBB0D22D4A42AFECD0EFA88088AD7A08AC02BD49F2C09AAEDABE9518240F2B55B338E41EC9DEE8E7922208700B1EEE59E19FEEE7CEE2E93D9EF0E18735E1DA043DCED004531518266B70D3B644BBEF553967D8792552092E55510A42C81045D6756CB0EDB0F1C5519D51F52B1BA35F52FAC33C9DACDD91F06E67BB2B8A5A2A0CD4FF95F089C132A73861A9874209989C8933A90DD82C78A302030100010282010064A6CD377C87C17705812366FB4D5C70EB0DCCE254B87BD27CF3B08461C3741BB74FBD566C8B627C6A82FF30CC1D0F1E3D6EB944E8D6B0D9D6D2BA0B722CC7E5CAE5E258C522AA1BFB3D573367645D689EBC6B2BD069DEF7918A607FC15C96F7BFF33459B34325938C4906C2E66BC73BD969273684D3AE7A53C47D17DD82C7C13807F41CE96F2A5ECAC40980F87D92030B028A4DA11DA13397B9B39C70C74D52168D0E14991CBE802F8B4E5F95276578E7B1DF0C7D859C8F2E8D453A2DD37D3E920F734A3D3FF66E4236F89CA60CBA1D02AE7C351AD62E53DF4A0C8272A63724C507CB7A50E1639AD879990D2ECE0A50016FEB54F9C6D9028B6992256DBCF8B102818100E25930D3C8FC1F291759E1BC5081418F005C586EA328637CC46F03F6F93B3F96CAF862937AD28FB64BBB1C845AA77B60A6BF772FC2C0C86DBD941475F0C45BC24BB8F058DE90434DA626A81DD5090B2802FB938E2EF438536F6910B3E8BF976A8C4D5F7882A8A84A8AC9F6A1D2D668B1089114A1B677D7F118F99A816C5DBA3F02818100AEBE84887CA0E1C1F7643AF86A001C50BB78D537757EAD64EEF705D6B37452AFE20AF5D580BEBA6A425B48A7AE08B17B40C8DFB81DD525D81A56C5651AB01FFBF933556BE4C30970CF2572433EC0E654F037A9E4A4F34F47B45498A810B23161C5F73194E7384F420502D9837524D958F8101CC0940665ACF57904E6947EC09D02818000A391D0B73B86F6FDBAE2393EDCEE8B71CBD0F01703D12C13FDE03BFD3E1E92D565D819647A5DAF7D0D3D2A5E7B248D044B7C11A57217DEBF6F409388A7753EDA29DE7BD1BD04839E9973560A38E950269A0133A08C4DF0665B1C91F5713D032EFC34EDC928A2B8FB2550CDEA2372CE3520FBB6ED25EF751DC5EE9AB8EC96CF02818005FF21BB3153B00BA0FABE8F51CBE92CD812207703C0322119963E8C0CA27C47EEE0E368CD3F3E54712C82C4C653240C0FC014F55388C200B57EAECD7669FEDEFDC146382AA48AC965426AB6660BE69B9996BF6CCA40534329AC11850AF5A27E3175F72C9DF6AFB99B446AC4791BA79DC6FD7E8F194552EDE98A9AA1730D1A7D02818073CF7A682E1A5F62AAE931B4EF78585C71B5EFAB9125E4C59F7E7AFA9C22FADB1DFD7ADB4FCFD4E49FB4567CE98AF9BC1FA2C7C3EBF2F0C2F5CDB5A20DB86213D65DEB280EEB46A2B2690F6A5A52131E6FAD62085C33E6AC16B226A254B9FF2C67684D952631940DD8031E2EBF4BA0EC3FF4C8FC574F3898E896E19AABFA7E41]
		
		
		//RSA 키생성 
		String pubKeyHexStr1 = "30820122300D06092A864886F70D01010105000382010F003082010A02820101008F5BC20A08ED313D847E305B8CB124D6256BCF443B2D5C8EB31399F44524F7CD063CD807BB5031DBFFD20987BAEF5FA411F8C42AAA72BA98962B0C2BEE07956876CF3DAC4B64F909F37F72F573BD0A810058157E62E5AAD241E0EF4405302F057B41D49667F051FEE16260033BDF909C61771A98216F19A05E511BD911506819E25E4A606BE710A92F9CA33B5C38F1FBE758A1BE244340A1577B0D3EA4A9C9029D65CB102F07FB5D9CC845ED376378DF196200EE497B7D18CF35B6695842CA25151678A57C48C57BD625C056B446BA727993956B94D00BD9E3DBB08CEC077EDC0CD319B5C37CBF2E062026D66FE404E83E433C586610AC583A5F9B167094621D0203010001";
		String pryKeyHexStr1 = "308204BE020100300D06092A864886F70D0101010500048204A8308204A402010002820101008F5BC20A08ED313D847E305B8CB124D6256BCF443B2D5C8EB31399F44524F7CD063CD807BB5031DBFFD20987BAEF5FA411F8C42AAA72BA98962B0C2BEE07956876CF3DAC4B64F909F37F72F573BD0A810058157E62E5AAD241E0EF4405302F057B41D49667F051FEE16260033BDF909C61771A98216F19A05E511BD911506819E25E4A606BE710A92F9CA33B5C38F1FBE758A1BE244340A1577B0D3EA4A9C9029D65CB102F07FB5D9CC845ED376378DF196200EE497B7D18CF35B6695842CA25151678A57C48C57BD625C056B446BA727993956B94D00BD9E3DBB08CEC077EDC0CD319B5C37CBF2E062026D66FE404E83E433C586610AC583A5F9B167094621D02030100010282010064B25D3FD33958C70F53DBFFD2797398803C942027391BB49891022914907D072484847219DEA0C719909D651BA79C9490931EA7A186690F591BEFB6C3C1CBEECED58F4A80C2F2334D388EB55E90C0DA1035CF1331C085169F73B25D230FCF5798568B4F02BF49B930F37AE18AA2E4DF138F27BD086F139F13E101209E0ACEB3A2A6767015FB036564F477D32332B81FCDF1D9D093684892829DE95A63FCEB03C4801ECB9385905AE0177E36C113EDEFE1B5C3C9DFF2945806F31E8D6479602EB5BBCF03BC6289EAE573E687F6621D0B32518B77CED14E4C91A9068DFF11A98397E3654EE006486BE57911CFB374E5FF3DE6D84B80DF5D6F3CDA12F2CA85E80102818100C29BB68A5EFBBF4F8CA1B18C4AAF62F1998E7C0ACF62FB449915CB8A0BE3889E0B8AB7819DF1F048BBEE04B2B5C2C0708111C69E83A5C47A4A2EAA77C0861E62B45FFFA3F9CCB3E47663FA3F0F0DFB6A9B64424D8DDB10473B02694331A588DF8F6ACC955AD6F08B79F5524724301A9BBBCED1DA3C1E2B9F9FD644A722A1830102818100BC952E827CA871808FFBF95F1AEFB85588BD42099C631A06959E80BBBDABAFA500E0DA4D2A96AC20F7379FC41792DE1D78B4BDF4C5B5C11A22C7548BF3C4E01F4838024A380DA2733DD191433A6FD6753C76B827B3B09BB612AAF12F6D15CDC89BAA5C4E91D68244D23B5CA5998E11C27BC512BC934239A2BC5CEAA7DD278B1D02818100B81420337CAAF6886186E4F1C60766390FBE0639177812230E06DEB3A291443DF2BEF0DB8B3239CE22ED7EC62845A25008D66EA0ABF8160472BCF78434B8E86F071D332BC0F2CF4A906DFB5CC079C25251D0212348C668FC67A5DD39B0F15AA9D4F7F9B260EDA534D954A2D22639D6416F01AFE0953318A271C774C2FF6FF5010281805E468A10CBB6FDBF12BC1A079494C0E769CB8B86F87A86994215123048FADA7D37BA310820C1605DBE993D32AFC2496E1C58E719C5F93E070DD9EE87649F4897FAE79D25736E45872D216668607F668C0765265D1AB4B0B34E13CD2D33709206B6E36CF00E72597F84460EE3EEA71A73CAA253E2980FA476998A2DF92B5348750281810092F95F9EDB0544AE1B7E19C3607DA521FD650DF917E139A596D029E16905FCAA4AF9D23FABA246C93037AFD66BB05D1822DEE8BB20B51B144DCF6AB084547A6C16BF90927928927991898B819F6580B47F7CC5690F0758B1DC801710DDC8EF9497B5F2C27D6D119FB665FADCAB4D153C8E9753888B3261BE2A01DCA942E686E5";
		
		//RSA-OAEP  키 생성 
//		String pubKeyHexStr1 = "30820122300D06092A864886F70D01010105000382010F003082010A02820101009A811290DA8B1F72D1FC871509EB7191A4C75C23445C70A65068D87C599B093170DB3F582AB418457106298A477C3F6F66625A6B7CDFA492E1445F9780113BBFC93173A867AEA3BC27D28A2E10E8645568FFBC5116ED6B91568322DFDC18D99D583EC503E52A90D5DBB0D22D4A42AFECD0EFA88088AD7A08AC02BD49F2C09AAEDABE9518240F2B55B338E41EC9DEE8E7922208700B1EEE59E19FEEE7CEE2E93D9EF0E18735E1DA043DCED004531518266B70D3B644BBEF553967D8792552092E55510A42C81045D6756CB0EDB0F1C5519D51F52B1BA35F52FAC33C9DACDD91F06E67BB2B8A5A2A0CD4FF95F089C132A73861A9874209989C8933A90DD82C78A30203010001";
//		String pryKeyHexStr1 = "308204BC020100300D06092A864886F70D0101010500048204A6308204A202010002820101009A811290DA8B1F72D1FC871509EB7191A4C75C23445C70A65068D87C599B093170DB3F582AB418457106298A477C3F6F66625A6B7CDFA492E1445F9780113BBFC93173A867AEA3BC27D28A2E10E8645568FFBC5116ED6B91568322DFDC18D99D583EC503E52A90D5DBB0D22D4A42AFECD0EFA88088AD7A08AC02BD49F2C09AAEDABE9518240F2B55B338E41EC9DEE8E7922208700B1EEE59E19FEEE7CEE2E93D9EF0E18735E1DA043DCED004531518266B70D3B644BBEF553967D8792552092E55510A42C81045D6756CB0EDB0F1C5519D51F52B1BA35F52FAC33C9DACDD91F06E67BB2B8A5A2A0CD4FF95F089C132A73861A9874209989C8933A90DD82C78A302030100010282010064A6CD377C87C17705812366FB4D5C70EB0DCCE254B87BD27CF3B08461C3741BB74FBD566C8B627C6A82FF30CC1D0F1E3D6EB944E8D6B0D9D6D2BA0B722CC7E5CAE5E258C522AA1BFB3D573367645D689EBC6B2BD069DEF7918A607FC15C96F7BFF33459B34325938C4906C2E66BC73BD969273684D3AE7A53C47D17DD82C7C13807F41CE96F2A5ECAC40980F87D92030B028A4DA11DA13397B9B39C70C74D52168D0E14991CBE802F8B4E5F95276578E7B1DF0C7D859C8F2E8D453A2DD37D3E920F734A3D3FF66E4236F89CA60CBA1D02AE7C351AD62E53DF4A0C8272A63724C507CB7A50E1639AD879990D2ECE0A50016FEB54F9C6D9028B6992256DBCF8B102818100E25930D3C8FC1F291759E1BC5081418F005C586EA328637CC46F03F6F93B3F96CAF862937AD28FB64BBB1C845AA77B60A6BF772FC2C0C86DBD941475F0C45BC24BB8F058DE90434DA626A81DD5090B2802FB938E2EF438536F6910B3E8BF976A8C4D5F7882A8A84A8AC9F6A1D2D668B1089114A1B677D7F118F99A816C5DBA3F02818100AEBE84887CA0E1C1F7643AF86A001C50BB78D537757EAD64EEF705D6B37452AFE20AF5D580BEBA6A425B48A7AE08B17B40C8DFB81DD525D81A56C5651AB01FFBF933556BE4C30970CF2572433EC0E654F037A9E4A4F34F47B45498A810B23161C5F73194E7384F420502D9837524D958F8101CC0940665ACF57904E6947EC09D02818000A391D0B73B86F6FDBAE2393EDCEE8B71CBD0F01703D12C13FDE03BFD3E1E92D565D819647A5DAF7D0D3D2A5E7B248D044B7C11A57217DEBF6F409388A7753EDA29DE7BD1BD04839E9973560A38E950269A0133A08C4DF0665B1C91F5713D032EFC34EDC928A2B8FB2550CDEA2372CE3520FBB6ED25EF751DC5EE9AB8EC96CF02818005FF21BB3153B00BA0FABE8F51CBE92CD812207703C0322119963E8C0CA27C47EEE0E368CD3F3E54712C82C4C653240C0FC014F55388C200B57EAECD7669FEDEFDC146382AA48AC965426AB6660BE69B9996BF6CCA40534329AC11850AF5A27E3175F72C9DF6AFB99B446AC4791BA79DC6FD7E8F194552EDE98A9AA1730D1A7D02818073CF7A682E1A5F62AAE931B4EF78585C71B5EFAB9125E4C59F7E7AFA9C22FADB1DFD7ADB4FCFD4E49FB4567CE98AF9BC1FA2C7C3EBF2F0C2F5CDB5A20DB86213D65DEB280EEB46A2B2690F6A5A52131E6FAD62085C33E6AC16B226A254B9FF2C67684D952631940DD8031E2EBF4BA0EC3FF4C8FC574F3898E896E19AABFA7E41";
		
		byte[] pubKeyArr = DatatypeConverter.parseHexBinary(pubKeyHexStr1);
		byte[] priKeyArr = DatatypeConverter.parseHexBinary(pryKeyHexStr1);
		
		
		
		
//		X509 spec 공개키 생성 
		KeyFactory kf = KeyFactory.getInstance("RSA");
		X509EncodedKeySpec x509Spec = new X509EncodedKeySpec(pubKeyArr);
		PublicKey pubKey =  kf.generatePublic(x509Spec);
		System.out.println(pubKey.getAlgorithm());
		System.out.println(pubKey.getFormat());
		
		
		
		
		PKCS8EncodedKeySpec pkcs8Spec = new PKCS8EncodedKeySpec(priKeyArr);
		PrivateKey priKey = kf.generatePrivate(pkcs8Spec);
		
		String plainText = "abc123";
		byte[] encByte = service.doRSAPubKeyEncrypt(pubKey, plainText.getBytes());
		
		
		System.out.println("encByte : \r\n"+new String(encByte));
		
		
		byte[] decByte =  service.doRSAPriKeyDecrypt(priKey, encByte);
		System.out.println("decByte : \r\n" +new String(decByte) );
		
		
		String encStr2 = "1911afac44b37228b6b287fbc484db5391fed023dae31b59213560df7fdfdc2af56db5135f88eb0ff8f3c6a33f7be208bdd1ba9e22ed0705ca6907b6fe8ae5904443c72be8feb3c49c1ee96840ad0747e7d71db6f8c1de91ef232867ea7d2fadb6e229fd5e7f5042070a4e6ab9b2bf4946207829033bc1ca69c4f84eee18fac2cb28e169faab32c214c7552a729a19130f69882148ee89943c22e90c7b6a41e34dc98451e66710a32bb02f9f8dbb53cfc9f60f4573155878a650c8ee35f059efaaa73ab5024f188210e3c1196e048e06cf269bc2dfdc2c56e4734783aa7291acf7f34aa217a180ac8e8f786506471567217328308f02abaea614d1f014449c55cc208ae98dfe9487c4e689b79be629e95e706e245677299e18db9387f25ac524a4bb2f522a38";
		byte[] encByte2 = DatatypeConverter.parseHexBinary(encStr2);
		System.out.println(encByte2.length);
		System.out.println(new String(encByte2));
		byte[] decByte2 = service.doRSAPriKeyDecrypt(priKey, encByte2);
		
		
		System.out.println("decByte2 : \r\n" +new String(decByte2) );
		
	}
	
	
	
    
}
